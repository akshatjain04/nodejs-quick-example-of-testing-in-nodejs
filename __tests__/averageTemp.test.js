// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=averageTemp_c5e4f830d6
ROOST_METHOD_SIG_HASH=averageTemp_db5e66b0a6


*/

// ********RoostGPT********
// Import the Jest framework
import { describe, expect, test, beforeAll, afterAll, beforeEach, afterEach } from '@jest/globals';
// Import the function to test
import { averageTemp } from '../weather/prepared-for-the-weather';

// Test suite for averageTemp function
describe('averageTemp', () => {
  // Test case for valid number inputs
  test('calculates average temperature correctly with valid numbers', () => {
    expect(averageTemp(20, 30)).toBe(25);
    expect(averageTemp(-10, 10)).toBe(0);
  });

  // Test case for invalid inputs
  test('returns NaN for invalid inputs', () => {
    expect(averageTemp('a', 30)).toBeNaN();
    expect(averageTemp(20, 'b')).toBeNaN();
    expect(averageTemp('a', 'b')).toBeNaN();
    expect(averageTemp(null, 30)).toBeNaN();
    expect(averageTemp(20, undefined)).toBeNaN();
  });

  // Test case for edge cases
  test('handles edge cases', () => {
    expect(averageTemp(0, 0)).toBe(0);
    expect(averageTemp(Number.MIN_VALUE, Number.MAX_VALUE)).toBeCloseTo(Number.MAX_VALUE / 2);
    expect(averageTemp(-Number.MAX_VALUE, Number.MAX_VALUE)).toBeCloseTo(0);
  });

  // Test cases for type coercion
  test('handles type coercion to numbers', () => {
    expect(averageTemp('20', '30')).toBe(25);
    expect(averageTemp(true, false)).toBe(0.5);
    expect(averageTemp(null, 0)).toBe(0);
  });

  // Test case for floating point numbers
  test('handles floating point numbers', () => {
    expect(averageTemp(0.1, 0.2)).toBeCloseTo(0.15);
    expect(averageTemp(-0.1, 0.1)).toBeCloseTo(0);
  });
});
