// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=getRainFall_3237bb46a3
ROOST_METHOD_SIG_HASH=getRainFall_76e9e0bca8


*/

// ********RoostGPT********
const getRainFall = require('../weather/fetch-weather').getRainFall;

describe('getRainFall', () => {

  test('should return 0 when rainObj is null', () => {
    expect(getRainFall(null)).toBe(0);
  });

  test('should return 0 when rainObj is undefined', () => {
    expect(getRainFall(undefined)).toBe(0);
  });

  test('should return 0 when rainObj has no known properties', () => {
    expect(getRainFall({})).toBe(0);
  });

  test('should return the value of "1h" when it is present', () => {
    const rainObj = { '1h': 10 };
    expect(getRainFall(rainObj)).toBe(10);
  });

  test('should return the value of "2h" when "1h" is not present', () => {
    const rainObj = { '2h': 5 };
    expect(getRainFall(rainObj)).toBe(5);
  });

  test('should return the value of "3h" when neither "1h" nor "2h" are present', () => {
    const rainObj = { '3h': 3 };
    expect(getRainFall(rainObj)).toBe(3);
  });

  test('should return 0 when "1h", "2h", and "3h" are not present', () => {
    const rainObj = { '4h': 2 };
    expect(getRainFall(rainObj)).toBe(0);
  });

  test('should prioritize "1h" over other properties when multiple are present', () => {
    const rainObj = { '1h': 10, '2h': 5, '3h': 3 };
    expect(getRainFall(rainObj)).toBe(10);
  });

  test('should prioritize "2h" over "3h" when "1h" is not present', () => {
    const rainObj = { '2h': 5, '3h': 3 };
    expect(getRainFall(rainObj)).toBe(5);
  });

  test('should handle non-numeric values and return 0', () => {
    const rainObj = { '1h': 'rain', '2h': 'heavy', '3h': 'light' };
    expect(getRainFall(rainObj)).toBe(0);
  });

  // Add any additional test cases that are relevant for your application's needs
});
